<?xml version="1.0"?>
<?xml-stylesheet href="chrome://global/skin" type="text/css"?>
<?xml-stylesheet href="chrome://mochikit/content/tests/SimpleTest/test.css" type="text/css"?>

<window title="Demo Test"
        xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
        onload="RunTest();">
  <title>Demo Test</title>

  <script type="application/javascript"
          src="chrome://mochikit/content/tests/SimpleTest/SimpleTest.js"/>

  <script type="application/javascript">
  <![CDATA[
    SimpleTest.waitForExplicitFinish();

    const Ci = Components.interfaces;
    const Cc = Components.classes;
    const Cu = Components.utils;

    Cu.import("resource://gre/modules/XPCOMUtils.jsm");
    Cu.import("resource://gre/modules/Services.jsm");

    /**
      * nsIDOMDOMError object
      */
    function createDOMError(aError) {
      let error = Cc["@mozilla.org/dom-error;1"]
                    .createInstance(Ci.nsIDOMDOMError);
      error.wrappedJSObject.init(aError);
      return error;
    }

    function DOMError() {
      this.wrappedJSObject = this;
    }

    DOMError.prototype = {
      init: function domerror_init(aError) {
        this.name = aError;
      },

      classID: Components.ID("{dcc1d5b7-43d8-4740-9244-b3d8db0f503d}"),

      QueryInterface: XPCOMUtils.generateQI([Ci.nsIDOMDOMError]),

      classInfo: XPCOMUtils.generateCI({classID: Components.ID("{dcc1d5b7-43d8-4740-9244-b3d8db0f503d}"),
                                        contractID: "@mozilla.org/dom-error;1",
                                        interfaces: [Ci.nsIDOMDOMError],
                                        flags: Ci.nsIClassInfo.DOM_OBJECT,
                                        classDescription: "DOMError object"})
    }

    function RunTest()
    {
      ok(true, "Test start");

      let error = createDOMError("theError");
      ok("name" in error, "error has name");
      is(error.name, "theError", "Error properly created");

      let request = Services.DOMRequest.createRequest(window);
      ok(request, "Request successfully created");
      ok("result" in request, "request has result");
      ok("error" in request, "request has error");
      ok("onsuccess" in request, "request has onsuccess");
      ok("onerror" in request, "request has onerror");
      ok("readyState" in request, "request has readyState");

      is(request.readyState, "pending", "readyState is pending");
      is(request.result, undefined, "result is undefined");
      is(request.onsuccess, null, "onsuccess is null");
      is(request.onerror, null, "onerror is null");

      // Fire detailed error.
      request.onsuccess = function(e) {
        ok(false, "Unexpected success");
      };
      request.onerror = function(e) {
        ok(e, "got error event");
        is(e.type, "error", "correct type during error");
        is(e.target, request, "correct target during error");
        is(request.readyState, "done", "correct readyState after error");
        is(request.error.name, "theError", "correct error after error");
        is(request.result, undefined, "correct result after error");
      };
      Services.DOMRequest.fireDetailedError(request, error);

      ok(true, "Chicken ready!");
      SimpleTest.finish();
    }
  ]]>
  </script>

  <body xmlns="http://www.w3.org/1999/xhtml">
    <p id="display"></p>
    <div id="content" style="display: none"></div>
    <pre id="test"></pre>
  </body>
</window>
